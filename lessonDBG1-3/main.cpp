#include <stdio.h>
int main()
{
	/*
	（一）编译错误与运行错误
	1.编译错误：编译器提示的错误
	编译器只帮我们检查语法错误（低级错误）
	语法有错那就不会生成exe文件
	2.运行错误：程序运行的结果和预期不一致
	说明你的程序写的不对，需要改。

	编译错误
	按F7生成，按Ctrl+Alt+F7重新生成
	观察输出窗口如果有错误双击该行错误提示

	注意：
	1）当有多条错误时，只看第一条提示
	因为后面的一堆错误很有可能是第一条错误引起的
	2）如果错误匪夷所思，可以“重新生成解决方案”
	检查错误还在不在（链接错误），正在链接。。。

	运行错误
	解决运行错误是程序员的主要任务之一
	运行时有错误，说明你的程序写的有问题
	程序员把缺陷叫做bug（臭虫）修改错误叫
	debug（比如申明整型时需要附一个初始值）
	double x;
	double y;
	printf("please input:");
	scanf_s("%lf,%lf", &x, &y);
	double result = x + y;
	printf("result :%lf \n", result);
	精确的描述错误
	三要素：
	1.前提条件：在什么条件下错误会发生
	2.预期结果：在这种情况下你期望你的程序应该输出什么结果
	3.实际结果：程序实现的输出结果是怎样的
	问题的复现
	1研发人员会根据问题的描述来定位解决问题
	2如果每次输入相同时，都能重现相同的问题
	那么问题是可以复现的
	3如果输入相同，但问题不重现
	那么称问题是不可复现的
	4一般情况下问题都是可以复现的
	5学会用三要素来描述你遇到的问题
	代码+错误的精确描述

	定位错误
	定位问题：找出问题的位置
	
	单步调试的原理
	1.程序是由很多步来构成的
	2.如果每一步都正确则最终结果正确
	但不调试就是走一步看一下结果，边走边观察
	直到发现一步出错了
	
	判断
	每一步都有一个预期的结果（观察变量和内存的值）
	如果不合乎预期这一步就是错误的

	断点与单步调试

	1.断点：break point（F9切换）
	当程序运行到此时暂停，进入单步模式
	2.单步：step over （F10）
	运行程序往下走一行
	3.继续运行：continue（F5）
	继续运行程序，直到下一个断点或程序结束

	步骤：
	1.加断点（shift+F5退出调试）
	2.启动调试（黄色箭头表示暂停在此处）
	3.单步（逐过程F10逐语句F11黄色箭头所指为即将执行）
	在调试窗口中观察每一步结果（如果没有此窗口则在窗口中选局部变量显示）
	
	*/


	


















	return 0;
}