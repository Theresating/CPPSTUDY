#include<stdio.h>
int main(){
	/* 
	类型转换
	表达式中发生的类型转换：
	1、赋值符左右两侧的类型不同
	2、不同类型的混合运算

	类型转换的数据丢失
	1.整型之间的转换，超出范围会被截断(数据丢失)
	unsigned char a = 0x1234;//int->unsigned char(有截断)
	int n = 123.456;//double -> int
	unsigned char b = 0x12345678;//0-255,高位丢失,显示0x78'x'
	2.小数转整数，小数部分会丢失（用范围大的类型保存大数）
	int b = 123.345;//局部变量显示123，不是四舍五入而是直接丢掉

	类型的自动提升
	表达式中各种类型混合运算时，编译器会自动类型提升
	1.char与short一起运算会被提升为short
	2.int与double一起运算int会被自动提升为double
	double a = 10 + 0.5;
	

	显示转换
	两个整数相除得到小数类型
	int a = 3;
	int b = 10;
	double result = 0.0000000000000000；
	double result = (double)3 / 10;//0.2999999999999999
	注：注意与3.0/10的区别：将3提升为double型以便结果能够保存小数
	printf("%f \n",10+0.3);//打印double类型需要%f,若写成%d则会出现任意结果

	优先级的问题
	多个运算符构成的混合表达式需要考虑优先级问题
    1.算数运算符与实际一致
	2.运算符在表中排好很难背
	3.强制加小括号，可读性强（没把握的顺序统一用括号）
	int c = 10;
	int d = 200;
	printf("%d \n", (c+d)>100);//1
	printf("%d \n", c + d> 100);//1
	printf("%d \n", c +( d > 100));//11
	记住少数几种优先级顺序
	1.算数优先级顺序（* 、最高）
	2.逻辑运算优先级（！最高，&&次之，||再次）

	数据丢失问题：用大容量变量存储数据
	类型提升问题：
	优先级问题：没人能记住上百种操作符，
	即便记住写出来也是不宜读代码，
	不要把难读的代码留给别人
	*/





























	return 0;
}



