#include <stdio.h>
int main(){
	/*
二维数组
（一）引例
    1.题目：
	  五个同学，语数外三门课成绩，数据如下：
	  char arr[15] = { 91, 92, 93, 81, 82, 83, 71,
	           72, 73, 61, 62, 63, 51, 52, 53 };
	2.分析：
	  第二个同学的第三门成绩：arr[m*3+n]
	  m:0,1,2,3,4
	  n:0,1,2
      一维数组出现问题，需要二维
（二）二维数组初始化
    1.形式：每一行以逗号分隔，五行三列
	  char arr[5][3] =
	  {
	    { 91, 92, 93 },
	    { 81, 82, 83 },
	    { 71, 72, 73 },
	    { 61, 62, 63 },
	    { 51, 52, 53 },

	  };
	2.二维数组初始化：
	  arr[m][n],m行n列,下标从零开始
	3.二维数组访问：
	  printf("%d \n", arr[1][2]);
	4.二维数组的内存视图：
	  4.1五行三列，输入数组名称，回车
	  4.2观察内存紧密排列，本质一致，写法简便
	  4.3内存中是15个字节
（三）小结：
	 1.二维数组与一维数组本质一样，内存字节数一样；
	 2.只是用二维数组更方便一些，不用计算下标；
	 3.一维数组最重要，二维数组或高维数组不常用
	
	
	
	
	
	
	
	
	
	
	
	*/
	
	




	return 0;
}



