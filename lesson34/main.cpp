/*
指针与数组
（一）回顾数组
   1.数组名：
     在c/c++中数组名就是地址，就是数组在内存中的位置
     它表示第一个元素的地址（简称：数组的首地址）
   2.例子：
     int arr[4] = {1,2,3,4};//数组名本身就是内存地址
     //在内存中直接输入数组名字然后回车，得数组在内存的排布
     int* p = arr;//arr本身的类型就是int*
     int* p = &arr[0];//第一个元素的地址，与上述相同
（二）指针加减法
   1.指针加法：后移n个元素
   2.指针减法：前移n个元素
	int arr[4] = { 1, 2, 3, 4 };
	int* p = arr;
	p += 1;//*p为2，后移一个
	printf("%d \n", *p);
	return 0;
（三）指针加减法与int加减法区别
   1.指针加减法加减的是一个元素，int加减法加减的是数值本身
   2.对于int*来说元素大小是4字节，所以后移一个元素，地址加4
	 char arr[4] = { 1, 2, 3, 4 };
	 char* p1 = &arr[0];
	 char* p2 = p1 + 1;//char一个字节
	 return 0;
（四）指针与数组之间的关系
   1.用p指向数组中arr的任一元素，以下两种方法效果相同
     1.1法一：p = arr + 3;
	 1.2法二：p = &arr[3];
   2.给数组元素赋值
     2.1法一：arr[3] = 10;
	 2.2法二：（arr+3)* = 10；
	 2.3法三：int* p = arr+3;*p = 10;
   3.把p当成数组使用（数组本质就是一连串内存）
	 int arr[4] = {1,2,3,4};
	 int* p = arr[1];
	 p[0] = 0xAA;//p[0]:自p开始的第0号元素即arr[1]
	 p[1] = 0xBB;//p[1]:即arr[2]
   4.数组的遍历
     4.1法一：使用数组下标号
	 int arr[4];
	 for(int i = 0;i<4;i++)
	 {
	    printf("%d \n",arr[i]);
	 }
	 4.2法二：使用指针的方法
	 int arr[4];//与普通数组遍历一致
	 for(int*p=arr;p<arr+4;p++)
	 {
	    printf("%d \n",*p);
	 }
	 int arr[4] = { 1, 2, 3, 4 };
	 int* p1 = &arr[0];
	 int* p1 = arr;//同上
	 int* p2 = &arr[3];
	 int* p2 = arr + 4;//同上
	 printf("%d \n", (p2 - p1));//3
	 printf("%d \n", ((int) p2 - (int) p1));
	 //12=3*4(每个int大小为4)
	 return 0;//3若按整数加减法来就得12
   5.越界访问严格禁止
     int arr[4] = {1,2,3,4};
	 arr[4] = 10;//运行错误，越界访问，可能会导致程序崩溃
	 使用指针访问数组元素时，也不能越界
	 int* p = arr;
	 *(p+4) = 10;//运行时错误，数组只有4个元素，不可访问第10个
（五）小结
   1.数组名就是数组第一个元素的地址
   2.数组与指针可以灵活转换










*/
#include <stdio.h>
int main()
{
	
}


















